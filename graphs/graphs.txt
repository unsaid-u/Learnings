GRAPHS

- A Graph is a non-linear data structure consisting of vertices and edges. The vertices are sometimes also referred to as nodes and the edges are lines or arcs that connect any two nodes in the graph. More formally a Graph is composed of a set of vertices( V ) and a set of edges( E ). The graph is denoted by G(E, V).

- Traversal techniques
    - BFS
    - DFS 


- Visited - in graphs it is very important to keep track of all the vertices you have visited.
- BFS 
    we traverse the breadth first, all the vertices connected to our current vertice
    we use a queue data structure
 >>>   
    q = Queue()
    q.push(V);
    visited[V] = true;

    while (!q.empty()) {	
        int currentVertex = q.front();
        q.pop();
        res.push_back(currentVertex);

        // Enqueue unvisited neighbors
        for (int neighbor : Graph[currentVertex]) {
            if (!visited[neighbor]) {
                q.push(neighbor);
                visited[neighbor] = true;
            }
        }
    }

    -> queue helps me maintain levels while traversing

- DFS 
    we traverse the depth first, the last element that is connected to our current vertice. via its connected vertices
    we use a stack data structure or recursion (recursion stack)

 >>>
    void traverse(int V, vector<int> graph[], unordered_set<int>& visited, vector<int>& result){
        if(!V || visited.find(V) != visited.end()){
            return;
        }
        result.push_back(V);
        visited.insert(V);
        for(int i =0; i<graph[V].size(); i++){
            traverse(graph[V][i], graph, visited, result);
        }
    }

    vector<int> DFS(int V, vector<int> graph[]){
        unordered_set<int> visited;
        vector<int> result ;
        // V is the starting node - we can start from any node
        traverse(V, graph, visited, result);
        return result;
    }

------------------------------------------------------------------------------------------

// topological sort -- for a DAG - Directed Acyclic Graph

DFS(int i){
    if(visited[i]) return

    visited[i] = true
    for(int j : adjList[i]){
        if(!visited[j]){
             DFS(j)
        }
       
    }

    stack.push(i)  //  basically push the end nodes first 
}

for(int i : vertices){
    if(!visited[i]){
        DFS(i)
    }
}


// this is good algo for dependency resolution 
// can help in scheduling in such cases


//   --> Kahn's Algo --- topological sorting using BFS 

    - array of indegree[]    //  num of edges directed in toward a vertex 
    - start with inserting the element with 0 as indegree in the queue, then decreasing its adjacent vertices indegree by 1
    - continue this all indegree values in the array are zero
    - the resulting queue is sorting in topological order 


------------------------------------------------------------------------------------------

For cycles in a graph

---> if visited 
        parent != adjNode   ---> Cycle is present 

    This conditions validates cycle in a graph , can be used with both dfs and bfs 


---> Now topological sorting algo can also be used of detecting cycles in a graph

// - DFS 
 def has_cycle_undirected(graph, node, visited, parent):
  
  visited[node] = True

  for neighbor in graph[node]:
    if not visited[neighbor]:
      if has_cycle_undirected(graph, neighbor, visited, node):  # Explore unvisited neighbors
        return True
    elif neighbor != parent:  # Cycle detected if visited neighbor is not the parent --------         UNDIRECTED GRAPH
      return True

  return False  


def has_cycle_directed(graph, node, visited, recursion_stack):
  visited[node] = True
  recursion_stack.append(node)

  for neighbor in graph[node]:
    if not visited[neighbor]:
      if has_cycle_directed(graph, neighbor, visited, recursion_stack):
        return True
    elif neighbor in recursion_stack:  # Back edge found (cycle detected)    --------         DIRECTED GRAPH
      return True

  recursion_stack.remove(node)
  return False

FOR DETECTING CYCLE IN GRAPHS
we have the following algo
    - using DFS indirected graph
    - using BFS indirected graph
    - using DFS directed graph 
    - Topological sorting - DFS 
    - Topological sorting - BFS - kahn's algorithm